[
  {
    "title": "Experimenting With Vue",
    "description": "First impressions of javascript's second most popular UI library.",
    "projectShortName": null,
    "content": "<h2>What is Vue</h2>\n<p>Vue.js, often lovingly referred to as just \"Vue\", is a progressive JavaScript framework for building user interfaces. It's the brainchild of Evan You, who set out to extract the parts he liked about Angular and build something lightweight and flexible.</p>\n<p>Vue is like that friend who's always up for anything – it can scale up from a simple library to a full-featured framework, depending on your needs. It's approachable, versatile, and performant, making it a favorite among developers of all experience levels.</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  &#x3C;</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#EEF0F9\">>{{ </span><span style=\"color:#4BF3C8\">greeting</span><span style=\"color:#EEF0F9\"> }}&#x3C;/</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">export</span><span style=\"color:#54B9FF\"> default</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">  data</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">    return</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">      greeting</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#FFD493\">'Hello, Vue!'</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<p>This simple example showcases Vue's declarative rendering and straightforward component structure.</p>\n<h2>React as a Frame of Reference</h2>\n<p>Before we dive deeper into Vue, let's quickly recap React. React, the popular kid on the block, is a JavaScript library for building user interfaces. It introduced the concept of a virtual DOM and component-based architecture to the masses.</p>\n<p>React's component model and unidirectional data flow have become something of an industry standard. It's like the Rosetta Stone of modern frontend development – if you understand React, you've got a solid foundation for understanding many other frameworks.</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#54B9FF\">function</span><span style=\"color:#00DAEF\"> Greeting</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">  const</span><span style=\"color:#EEF0F9\"> [</span><span style=\"color:#ACAFFF\">greeting</span><span style=\"color:#EEF0F9\">, </span><span style=\"color:#ACAFFF\">setGreeting</span><span style=\"color:#EEF0F9\">] = </span><span style=\"color:#4BF3C8\">React</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#00DAEF\">useState</span><span style=\"color:#EEF0F9\">(</span><span style=\"color:#FFD493\">'Hello, React!'</span><span style=\"color:#EEF0F9\">);</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">  return</span><span style=\"color:#EEF0F9\"> &#x3C;</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#EEF0F9\">></span><span style=\"color:#54B9FF\">{</span><span style=\"color:#4BF3C8\">greeting</span><span style=\"color:#54B9FF\">}</span><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#EEF0F9\">>;</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This React component achieves the same result as our Vue example, using hooks for state management.</p>\n<h2>Similarities to React</h2>\n<p>Vue and React are like fraternal twins – they share a lot of DNA but have their own distinct personalities. Both frameworks:</p>\n<ol>\n<li>Use a virtual DOM for efficient updates</li>\n<li>Encourage component-based architecture</li>\n<li>Support unidirectional data flow</li>\n<li>Have strong ecosystems and community support</li>\n</ol>\n<p>Both also have their own CLI tools for project scaffolding, state management solutions (Piñata and Redux), and routing libraries (vue-router and react-router).</p>\n<h2>Where Vue Makes Improvements</h2>\n<h3>Template Syntax</h3>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  &#x3C;</span><span style=\"color:#54B9FF\">button</span><span style=\"color:#EEF0F9\"> @</span><span style=\"color:#ACAFFF\">click</span><span style=\"color:#EEF0F9\">=</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#4BF3C8\">incrementCount</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#EEF0F9\">>Clicks: {{ </span><span style=\"color:#4BF3C8\">count</span><span style=\"color:#EEF0F9\"> }}&#x3C;/</span><span style=\"color:#54B9FF\">button</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">export</span><span style=\"color:#54B9FF\"> default</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">  data</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">    return</span><span style=\"color:#EEF0F9\"> { </span><span style=\"color:#4BF3C8\">count</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#FFD493\">0</span><span style=\"color:#EEF0F9\"> }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  },</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">  methods</span><span style=\"color:#EEF0F9\">: {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">    incrementCount</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#ACAFFF\">      this</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">count</span><span style=\"color:#EEF0F9\">++</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span></code></pre>\n<h3>Reactivity System</h3>\n<p>Vue is more granular and efficient. It knows exactly which components need to update when data changes, reducing unnecessary re-renders.</p>\n<h3>Directives</h3>\n<p>Vue provides powerful <em>directives</em> like <code>v-for</code> and <code>v-if</code> that make common tasks a breeze (similar to svelte)</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  &#x3C;</span><span style=\"color:#54B9FF\">ul</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    &#x3C;</span><span style=\"color:#54B9FF\">li</span><span style=\"color:#54B9FF\"> v-for</span><span style=\"color:#EEF0F9\">=</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#4BF3C8\">item</span><span style=\"color:#54B9FF\"> in</span><span style=\"color:#4BF3C8\"> items</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#EEF0F9\"> :</span><span style=\"color:#ACAFFF\">key</span><span style=\"color:#EEF0F9\">=</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#4BF3C8\">item</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">id</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#54B9FF\"> v-if</span><span style=\"color:#EEF0F9\">=</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#4BF3C8\">item</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">isVisible</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">      {{ </span><span style=\"color:#4BF3C8\">item</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">name</span><span style=\"color:#EEF0F9\"> }}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    &#x3C;/</span><span style=\"color:#54B9FF\">li</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  &#x3C;/</span><span style=\"color:#54B9FF\">ul</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span></code></pre>\n<h3>Computed Properties</h3>\n<p>While React can achieve similar functionality with <code>useMemo</code>, Vue's computed properties are more intuitive and require less boilerplate.</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">export</span><span style=\"color:#54B9FF\"> default</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">  data</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">    return</span><span style=\"color:#EEF0F9\"> { </span><span style=\"color:#4BF3C8\">firstName</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#FFD493\">'John'</span><span style=\"color:#EEF0F9\">, </span><span style=\"color:#4BF3C8\">lastName</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#FFD493\">'Doe'</span><span style=\"color:#EEF0F9\"> }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  },</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">  computed</span><span style=\"color:#EEF0F9\">: {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">    fullName</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">      return</span><span style=\"color:#FFD493\"> `</span><span style=\"color:#54B9FF\">${</span><span style=\"color:#ACAFFF\">this</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">firstName</span><span style=\"color:#54B9FF\">}</span><span style=\"color:#54B9FF\"> ${</span><span style=\"color:#ACAFFF\">this</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">lastName</span><span style=\"color:#54B9FF\">}</span><span style=\"color:#FFD493\">`</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span></code></pre>\n<h2>DX and the Single File Component</h2>\n<p>Vue's crown jewel is its Single File Component (SFC) format. It's like a cozy home where template, script, and style all live under one roof. This structure promotes better organisation and makes components more self-contained.</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  &#x3C;</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#ACAFFF\"> class</span><span style=\"color:#EEF0F9\">=</span><span style=\"color:#4BF3C8\">\"greeting\"</span><span style=\"color:#EEF0F9\">>{{ </span><span style=\"color:#4BF3C8\">message</span><span style=\"color:#EEF0F9\"> }}&#x3C;/</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">export</span><span style=\"color:#54B9FF\"> default</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">  data</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">    return</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">      message</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#FFD493\">'Hello, Vue!'</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">style</span><span style=\"color:#ACAFFF\"> scoped</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">.greeting</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  color: </span><span style=\"color:#FFD493\">#42b983</span><span style=\"color:#EEF0F9\">;</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">style</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span></code></pre>\n<p>This format is a developer experience (DX) dream. It's easy to reason about, keeps related code close together, and supports scoped styles out of the box. The Vue DevTools are also a joy to use, providing clear insight into your component hierarchy and state.</p>\n<h2>Summary</h2>\n<p>Vue takes many of the best ideas from React and other frameworks, and packages them in a more approachable, flexible format. Its intuitive template syntax, efficient reactivity system, and excellent developer experience make it a strong contender in the frontend framework arena.</p>\n<p>While React still holds the crown in terms of market share and job opportunities, Vue is like that cool, efficient colleague who gets things done with less fuss. It's particularly shine in scenarios where you need to gradually adopt a framework into an existing project, or when working with designers and developers who appreciate a gentler learning curve.</p>\n<p>In the end, both Vue and React are powerful tools in a UX developer's arsenal. The choice between them often comes down to project requirements, team expertise, and personal preference. But one thing's for sure – if you give Vue a chance, you might just find yourself saying \"Oh la la!\" to this delightful framework.</p>",
    "coverImageUrl": "https://res.cloudinary.com/practicaldev/image/fetch/s--q6AIFazN--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll22z8mea106b4vjdjy7.jpeg",
    "date": "2024-07-16T00:00:00.000Z",
    "tags": [
      "vue",
      "web"
    ],
    "slug": "experimenting-with-vue"
  },
  {
    "title": "Introducing playQ: A Cutting-Edge Videogame Playlist Manager",
    "description": "playQ is a groundbreaking application designed to revolutionize the way gamers organize and share their video game collections. Leveraging the latest technologies, playQ offers an unparalleled experience for managing and exploring video game playlists.",
    "projectShortName": "playq",
    "content": "<p>At its core, <a href=\"/projects/playq-videogame-playlist-manager\">playQ</a>  is a sophisticated game management platform that empowers users to create, curate, and share personalised playlists of video games. With an intuitive interface and robust feature set, playQ redefines the way gamers interact with their collections, fostering a more immersive and social gaming experience.</p>\n<p>One of playQ's standout features is its comprehensive rating system, enabling users to assign personal ratings to games within their playlists. This powerful functionality not only allows for in-depth comparisons between titles but also facilitates informed decision-making when selecting the next game to play.</p>\n<p>Additionally, playQ seamlessly integrates social networking capabilities, enabling users to share their meticulously crafted playlists with friends or the broader gaming community. This feature promotes game discovery, fosters meaningful discussions, and cultivates a vibrant community of passionate gamers.\nA Cutting-Edge Tech Stack for an Exceptional User Experience</p>\n<p>playQ is more than just a game playlist manager; it is a testament to the power of modern web development technologies. The application's architecture is built upon a robust stack of industry-leading frameworks and libraries, ensuring optimal performance, scalability, and user experience.</p>\n<p>Supabase: At the core of playQ lies Supabase, an open-source Firebase alternative that provides seamless authentication and database management. Supabase replicates many of Firebase's features, such as real-time subscriptions and auto-generated APIs, while offering the versatility and power of PostgreSQL.</p>\n<p>Remix and React: The user interface (UI), routing, and data loading are powered by the dynamic duo of Remix and React. Remix is a cutting-edge web framework for React that priorities user experience, while React facilitates the efficient development of reusable UI components.</p>\n<p>DrizzleORM: playQ's Object-Relational Mapping (ORM) is handled by DrizzleORM, a powerful tool that maps JavaScript objects to database tables, simplifying data operations like inserting, updating, or querying.</p>\n<p>Radix-UI and Shad/cn Inspired Components: To further elevate the user experience, playQ incorporates Radix-UI, a library of low-level, accessible, and unstyled UI components designed for building high-quality web interfaces. The application's UI design is also influenced by the modern and minimalist aesthetic of ShaD/CN styled-components.</p>\n<p>By leveraging this carefully curated tech stack, playQ showcases how sophisticated technologies can be combined to deliver efficient coding practices, superior performance, and an unparalleled user experience.</p>",
    "coverImageUrl": "https://ck-portfolio-images.s3.eu-west-2.amazonaws.com/images/projects/playq/1.png",
    "date": "2024-02-25",
    "tags": [
      "playQ"
    ],
    "slug": "introducing-playq-a-cuttingedge-videogame-playlist-manager"
  },
  {
    "title": "Using Notion as a Simple Content Management System",
    "description": "This Little Piggy required a simple yet flexible content management solution on a small scale. Notion ticked all the boxes.",
    "projectShortName": "thislittlepiggyrichmond",
    "content": "<p>When designing the new website for <a href=\"/projects/this-little-piggy-richmond\">This Little Piggy Richmond</a> , a non-profit organisation dedicated to rehoming guinea pigs, the top priority was a simple and efficient system for adding content to the website. The organisation needed a solution that allowed them to move quickly without being bogged down by complex processes or systems prone to errors and frustration. The website is a crucial part of their work, and the ability to update it promptly was key.</p>\n<h2>The Challenge: High Turnover and Cute Content</h2>\n<p>This Little Piggy Richmond experiences a high turnover of guinea pigs due to the need for pairing, partnering, new arrivals, and high levels of pregnancy. As a result, they required a website that could showcase the cuteness factor of these animals while ensuring that the content remained as up-to-date as possible.</p>\n<h2>The Solution: Notion as a Backend</h2>\n<p>Initially, we considered creating an admin panel tool alongside the public website, allowing the organisation to update the database directly. However, we decided against this approach for several reasons:</p>\n<ol>\n<li><strong>Increased Workload</strong>: Building an admin panel would have doubled the amount of work required, and the need for a new website was urgent.</li>\n<li><strong>Lack of Flexibility</strong>: An admin panel might have been too inflexible during the early stages, where iterations and changes were likely to occur.</li>\n</ol>\n<p>After exploring various options, we had the idea of using Notion as the backend, with all data presented on the front-end being pulled directly from Notion.</p>\n<h2>Considerations and Challenges</h2>\n<p><strong>Open Schema</strong>: Notion has a very flexible and lax data model, as expected from a product of its kind. To ensure data integrity, we had to implement strict measures to lock down the databases that touched the front-end, preventing schema changes. Additionally, we needed to handle any potential issues gracefully on the front-end to maintain the application's availability.</p>\n<p><strong>Dynamic vs. Static</strong>: As the ability to quickly change content on the front-end was crucial for the client, rendering pages dynamically on each visit was the preferred approach. However, it was essential to consider the issue of 'live' data being pulled from Notion before it was ready for publication.</p>\n<p><strong>Data Ownership</strong>: One potential risk of this solution was the ownership of the data. Since Notion is not designed as a database, there was a possibility that they could revoke API access or change their terms to disallow this use case. To mitigate this risk, we implemented data backups and ensured a clear path for data portability.</p>\n<h2>Implementation Details</h2>\n<p><strong>Graceful Error Handling and Fallback Data</strong>: To handle cases where the client had incomplete data in the Notion database, we implemented a solution where our components could handle missing data gracefully. This approach provided informative feedback to the client, allowing them to identify and rectify missing data issues without crashing the entire site.</p>\n<p><strong>Data Syncing</strong>: To ensure data integrity and mitigate potential risks, we set up a daily backup process that synchronised data from Notion to a SQLite database. This backup would enable us to migrate to a different solution if necessary.</p>\n<p><strong>Mark as Ready</strong>: To prevent accidental publishing of incomplete or unready data, we implemented a tagging system in Notion. Only data marked as \"website-ready\" would be pulled and displayed on the front-end.</p>\n<p>By leveraging Notion as the backend and implementing these measures, we were able to provide <a href=\"/projects/this-little-piggy-richmond\">This Little Piggy Richmond</a> with a simple and efficient content management system that met their needs for promptly updating their website with the latest adorable guinea pig content.</p>",
    "coverImageUrl": "https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2021/02/Notion-logo-1.png",
    "date": "2024-02-14",
    "tags": [
      "web development",
      "backend"
    ],
    "slug": "using-notion-as-a-simple-content-management-system"
  },
  {
    "title": "PlayQ Developer Update",
    "description": "A brief reflection on my time building playQ.",
    "projectShortName": "playq",
    "content": "<p>Welcome to the first developer update for playQ, the playlist building app. As you will see, this is likely going to be the <em>last</em> developer update on this project as well.</p>\n<div data-callout data-callout-type=\"note\">\n<div data-callout-title>Going Forward...</div>\n<div data-callout-body>\n<p>This is something that I want to do more, going forward, for all my projects. I am yet to decide if this will be done on a per-project basis, or in a time-based basis. But I want to practice working in public, and having that extra level of accountability.</p>\n</div>\n</div>\n<p>I am going to look into the recent changes that I have made to this project to better prepare it as a portfolio project to present to potential employers. Having used this project as a workbench to tinker and learn the trade - I had left it in quite a state. This is not something I have much shame for, as the purpose of this project was always to be a vessel through which I could apply what I was studying to a practical product. It was never meant to be a production grade piece of software, nor was it working to a set of well researched specifications. Don't get me wrong, I wish it was a shining spectacle of a product with well designed features and a beautiful code base! But It has served its purpose admirably, and I feel like I have polished it up enough such that one can see what I can do and how I can build a modern application; even if a big refactor is clearly required if there was ever going to be more than a single developer working on it.</p>\n<h2>Looking at the changes</h2>\n<p>I kept all these changes on a separate branch, to compare the updates that I have made. Doing this has shown me how large PRs into <code>main</code> are terrible. Thankfully, I have been incrementally working on this new branch, but if I had to merge these +-4000 lines, it would be grim.</p>\n<ul>\n<li>Finish off basic friends functionality</li>\n<li>Remove email confirmation on signup</li>\n<li>Start using Remix's context for route-fetched data</li>\n<li>Write a simple but effective wrapper for the IGDB client</li>\n<li>Move search state to the server (thanks to the client)</li>\n<li>Remove a heap of unfinished features</li>\n<li>Move functionality out of cloudflare function into the main application</li>\n</ul>\n<h2>Why Were things weird?</h2>\n<p>This project is mostly for me to learn a heap of different aspects of full-stack development. In terms of scope, the app idea is small enough to be move quickly, but fully featured enough to touch on nearly all the aspects I wanted to cover in a 'real world' project. However, because my goal was to learn different libraries and best practices, it meant that the project quickly grew to a big mess of different libraries that I was testing out. Each feature often had its own dependencies, and my solutions were often overlapping. As such, the project became pretty bloated, and there is a lot of scope for cleaning things up.</p>\n<h3>What is missing?</h3>\n<p>TESTS! The project really needs some tests so that I can move faster when refactoring. They are the single biggest missing aspect, and it has taught me that I really want to make sure I have a well tested application moving forward with my other projects. They are an up-front effort, but the payoff has become very clear.</p>\n<h2>Done, for now</h2>\n<p>I have worked on this project on and off for about a year now as my main outlet for applying things that I have learnt. It was my first #Remix project (and indeed my first Next app router project before that), and at various points in its life it has played with several different state management libraries, serverless deployments, various auth solutions, and I toyed with extracting the entire backend logic to a separate application.</p>\n<p>For now though, I am going to move on and apply what I know to something new. One side effect of this approach has been a really important learning point:</p>\n<blockquote>\n<p>Good quality code is the most important thing.</p>\n</blockquote>\n<p>By moving fast and leaving a mess, my code has become quite difficult, and quite unenjoyable to work with. It is at a stage now where I feel that I should just re-write the whole thing from scratch; indeed, I think that by doing so the whole project would move at a much quicker pace. So why not do that? Well, I have worked on this for a decent length of time now, and I think it is time to take what I have learnt and start something else - if I am going to have to re-write this, why not?</p>",
    "coverImageUrl": "https://images.unsplash.com/photo-1506744038136-46273834b3fb?q=80&w=4140&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "date": "2024-08-11T00:00:00.000Z",
    "tags": [
      "web development",
      "updates"
    ],
    "slug": "playq-developer-update"
  },
  {
    "title": "Aligning routes with nested state in Remix",
    "description": "In data intensive applications, we are often faced with a big challenge; how do we ensure that data is not over-fetched, but up to date? When coupling this with Remix's route structure, we can have a real challenge on our hands with the battle for efficiency. Lets break it down.",
    "projectShortName": "gamemaster",
    "content": "<p>It is often good practice to think of application state as a data structure. Lets take a look at an app I have recently been working on:</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#54B9FF\">type</span><span style=\"color:#ACAFFF\"> User</span><span style=\"color:#EEF0F9\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    id</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">string</span><span style=\"color:#EEF0F9\">,</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    name</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">string</span><span style=\"color:#EEF0F9\">, </span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    games</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">Game</span><span style=\"color:#EEF0F9\">[]</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">type</span><span style=\"color:#ACAFFF\"> Game</span><span style=\"color:#EEF0F9\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    id</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">string</span><span style=\"color:#EEF0F9\">,</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    name</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">string</span><span style=\"color:#EEF0F9\">, </span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    notes</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">Note</span><span style=\"color:#EEF0F9\">[]</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    characters</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">Character</span><span style=\"color:#EEF0F9\">[]</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    factions</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">Faction</span><span style=\"color:#EEF0F9\">[]</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">type</span><span style=\"color:#ACAFFF\"> Character</span><span style=\"color:#EEF0F9\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    id</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">string</span><span style=\"color:#EEF0F9\">,</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    name</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">string</span><span style=\"color:#EEF0F9\">, </span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    linkedNotes</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">Note</span><span style=\"color:#EEF0F9\">[]</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">type</span><span style=\"color:#ACAFFF\"> Faction</span><span style=\"color:#EEF0F9\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    id</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">string</span><span style=\"color:#EEF0F9\">,</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    name</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">string</span><span style=\"color:#EEF0F9\">, </span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    linkedNotes</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">Note</span><span style=\"color:#EEF0F9\">[]</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">type</span><span style=\"color:#ACAFFF\"> Note</span><span style=\"color:#EEF0F9\"> = {</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    id</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">string</span><span style=\"color:#EEF0F9\">,</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    name</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">string</span><span style=\"color:#EEF0F9\">, </span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    linkedNotes</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">Note</span><span style=\"color:#EEF0F9\">[]</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    linkedCharacters</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">Character</span><span style=\"color:#EEF0F9\">[];</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">    linkedFactions</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#ACAFFF\">Faction</span><span style=\"color:#EEF0F9\">[]</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, there is a lot of many-to-many relationships tied up in our app, and even before we dive into any examples, it is easy to imagine the challenges that we might face when we try to model this state in a top-down route based model like Remix.</p>\n<p>To start with, lets have a look at the basic structure of the UI of our app. We are going to have a sidebar which serves as our main source of navigation. As such, it is important that we have all our data <strong>up front</strong>, in the lowest level layout route of the app. We are going to want to have access to all of a user's games, and all of those games' nested items. With a little more thought though we can see we have a clear optimisation. We only actually need the names and ids of each entity for the sidebar - we need these to provide the navigation functionality; but all other data is not yet required (although if we wanted to implement a tree-like structure (not unreasonable), then we would need to extend this requirement to include the ids and names of all sub items.)</p>\n<p>Now, image we click on one of our <code>note</code> links and navigate to the notes route. Here, we are obviously going to need all the data for any given note that relates to the UI. If we had made the decision earlier to load all of our data up front, we could have performed a search algorithm on our central data structure to get this - but instead we are going with the simpler, and at this stage, more performant option - we will use the route loader to get everything we need. So far so good.</p>\n<p>Later on, we realise that in the notes <em>layout</em> route, we actually would like to have data on all the notes for a specific game. As you probably noted from the data structure outlined above, our app has the ability to link entities together. In order to do so, we are going to need all of a game's sub entities so that we can build out a grid list for the user to select which item they want to connect. Now, we kind of have this data from our root layout. But this is a very sensible place to fetch exactly what we need - so lets do so.</p>",
    "coverImageUrl": "https://images.unsplash.com/photo-1506744038136-46273834b3fb?q=80&w=4140&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "date": "2024-09-24T00:00:00.000Z",
    "tags": [
      "web development",
      "remix",
      "data"
    ],
    "slug": "aligning-routes-with-nested-state-in-remix"
  }
]