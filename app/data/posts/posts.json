[
  {
    "title": "Announcement! You can view and download my CV online",
    "description": "My CV is now available from this website, please do check it out.",
    "projectShortName": "",
    "content": "<p>Hey! ðŸ‘‹</p>\n<p>This is just a quick note to let you know that you can find my <a href=\"/cv\">CV online here</a>.</p>\n<p>I am a self taught web developer who is looking for opportunities in a technical role. I have four years experience in Product and UX, and I am proficient in Typescript, React, and a variety of Javascript runtimes. If you like what you see, do let me know and lets connect!</p>",
    "coverImageUrl": "https://images.unsplash.com/photo-1581291518857-4e27b48ff24e?q=80&w=2970&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "date": "2024-03-20",
    "author": {
      "name": "Callum Kloos",
      "imageUrl": "/avatar-scaled.jpg"
    },
    "tags": [],
    "slug": "announcement-you-can-view-and-download-my-cv-online"
  },
  {
    "title": "Experimenting With Vue",
    "description": "First impressions of javascript's second most popular UI library.",
    "projectShortName": null,
    "content": "<h2>What is Vue</h2>\n<p>Vue.js, often lovingly referred to as just \"Vue\", is a progressive JavaScript framework for building user interfaces. It's the brainchild of Evan You, who set out to extract the parts he liked about Angular and build something lightweight and flexible.</p>\n<p>Vue is like that friend who's always up for anything â€“ it can scale up from a simple library to a full-featured framework, depending on your needs. It's approachable, versatile, and performant, making it a favorite among developers of all experience levels.</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  &#x3C;</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#EEF0F9\">>{{ </span><span style=\"color:#4BF3C8\">greeting</span><span style=\"color:#EEF0F9\"> }}&#x3C;/</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">export</span><span style=\"color:#54B9FF\"> default</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">  data</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">    return</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">      greeting</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#FFD493\">'Hello, Vue!'</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<p>This simple example showcases Vue's declarative rendering and straightforward component structure.</p>\n<h2>React as a Frame of Reference</h2>\n<p>Before we dive deeper into Vue, let's quickly recap React. React, the popular kid on the block, is a JavaScript library for building user interfaces. It introduced the concept of a virtual DOM and component-based architecture to the masses.</p>\n<p>React's component model and unidirectional data flow have become something of an industry standard. It's like the Rosetta Stone of modern frontend development â€“ if you understand React, you've got a solid foundation for understanding many other frameworks.</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#54B9FF\">function</span><span style=\"color:#00DAEF\"> Greeting</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">  const</span><span style=\"color:#EEF0F9\"> [</span><span style=\"color:#ACAFFF\">greeting</span><span style=\"color:#EEF0F9\">, </span><span style=\"color:#ACAFFF\">setGreeting</span><span style=\"color:#EEF0F9\">] = </span><span style=\"color:#4BF3C8\">React</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#00DAEF\">useState</span><span style=\"color:#EEF0F9\">(</span><span style=\"color:#FFD493\">'Hello, React!'</span><span style=\"color:#EEF0F9\">);</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">  return</span><span style=\"color:#EEF0F9\"> &#x3C;</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#EEF0F9\">></span><span style=\"color:#54B9FF\">{</span><span style=\"color:#4BF3C8\">greeting</span><span style=\"color:#54B9FF\">}</span><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#EEF0F9\">>;</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This React component achieves the same result as our Vue example, using hooks for state management.</p>\n<h2>Similarities to React</h2>\n<p>Vue and React are like fraternal twins â€“ they share a lot of DNA but have their own distinct personalities. Both frameworks:</p>\n<ol>\n<li>Use a virtual DOM for efficient updates</li>\n<li>Encourage component-based architecture</li>\n<li>Support unidirectional data flow</li>\n<li>Have strong ecosystems and community support</li>\n</ol>\n<p>Both also have their own CLI tools for project scaffolding, state management solutions (PiÃ±ata and Redux), and routing libraries (vue-router and react-router).</p>\n<h2>Where Vue Makes Improvements</h2>\n<h3>Template Syntax</h3>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  &#x3C;</span><span style=\"color:#54B9FF\">button</span><span style=\"color:#EEF0F9\"> @</span><span style=\"color:#ACAFFF\">click</span><span style=\"color:#EEF0F9\">=</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#4BF3C8\">incrementCount</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#EEF0F9\">>Clicks: {{ </span><span style=\"color:#4BF3C8\">count</span><span style=\"color:#EEF0F9\"> }}&#x3C;/</span><span style=\"color:#54B9FF\">button</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">export</span><span style=\"color:#54B9FF\"> default</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">  data</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">    return</span><span style=\"color:#EEF0F9\"> { </span><span style=\"color:#4BF3C8\">count</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#FFD493\">0</span><span style=\"color:#EEF0F9\"> }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  },</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">  methods</span><span style=\"color:#EEF0F9\">: {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">    incrementCount</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#ACAFFF\">      this</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">count</span><span style=\"color:#EEF0F9\">++</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span></code></pre>\n<h3>Reactivity System</h3>\n<p>Vue is more granular and efficient. It knows exactly which components need to update when data changes, reducing unnecessary re-renders.</p>\n<h3>Directives</h3>\n<p>Vue provides powerful <em>directives</em> like <code>v-for</code> and <code>v-if</code> that make common tasks a breeze (similar to svelte)</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  &#x3C;</span><span style=\"color:#54B9FF\">ul</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    &#x3C;</span><span style=\"color:#54B9FF\">li</span><span style=\"color:#54B9FF\"> v-for</span><span style=\"color:#EEF0F9\">=</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#4BF3C8\">item</span><span style=\"color:#54B9FF\"> in</span><span style=\"color:#4BF3C8\"> items</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#EEF0F9\"> :</span><span style=\"color:#ACAFFF\">key</span><span style=\"color:#EEF0F9\">=</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#4BF3C8\">item</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">id</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#54B9FF\"> v-if</span><span style=\"color:#EEF0F9\">=</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#4BF3C8\">item</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">isVisible</span><span style=\"color:#4BF3C8\">\"</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">      {{ </span><span style=\"color:#4BF3C8\">item</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">name</span><span style=\"color:#EEF0F9\"> }}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    &#x3C;/</span><span style=\"color:#54B9FF\">li</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  &#x3C;/</span><span style=\"color:#54B9FF\">ul</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span></code></pre>\n<h3>Computed Properties</h3>\n<p>While React can achieve similar functionality with <code>useMemo</code>, Vue's computed properties are more intuitive and require less boilerplate.</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">export</span><span style=\"color:#54B9FF\"> default</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">  data</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">    return</span><span style=\"color:#EEF0F9\"> { </span><span style=\"color:#4BF3C8\">firstName</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#FFD493\">'John'</span><span style=\"color:#EEF0F9\">, </span><span style=\"color:#4BF3C8\">lastName</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#FFD493\">'Doe'</span><span style=\"color:#EEF0F9\"> }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  },</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">  computed</span><span style=\"color:#EEF0F9\">: {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">    fullName</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">      return</span><span style=\"color:#FFD493\"> `</span><span style=\"color:#54B9FF\">${</span><span style=\"color:#ACAFFF\">this</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">firstName</span><span style=\"color:#54B9FF\">}</span><span style=\"color:#54B9FF\"> ${</span><span style=\"color:#ACAFFF\">this</span><span style=\"color:#EEF0F9\">.</span><span style=\"color:#4BF3C8\">lastName</span><span style=\"color:#54B9FF\">}</span><span style=\"color:#FFD493\">`</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span></code></pre>\n<h2>DX and the Single File Component</h2>\n<p>Vue's crown jewel is its Single File Component (SFC) format. It's like a cozy home where template, script, and style all live under one roof. This structure promotes better organisation and makes components more self-contained.</p>\n<pre class=\"shiki houston\" style=\"background-color:#17191e;color:#eef0f9\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  &#x3C;</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#ACAFFF\"> class</span><span style=\"color:#EEF0F9\">=</span><span style=\"color:#4BF3C8\">\"greeting\"</span><span style=\"color:#EEF0F9\">>{{ </span><span style=\"color:#4BF3C8\">message</span><span style=\"color:#EEF0F9\"> }}&#x3C;/</span><span style=\"color:#54B9FF\">div</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">template</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">export</span><span style=\"color:#54B9FF\"> default</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#00DAEF\">  data</span><span style=\"color:#EEF0F9\">() {</span></span>\n<span class=\"line\"><span style=\"color:#54B9FF\">    return</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">      message</span><span style=\"color:#EEF0F9\">: </span><span style=\"color:#FFD493\">'Hello, Vue!'</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">    }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  }</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">script</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;</span><span style=\"color:#54B9FF\">style</span><span style=\"color:#ACAFFF\"> scoped</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"><span style=\"color:#4BF3C8\">.greeting</span><span style=\"color:#EEF0F9\"> {</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">  color: </span><span style=\"color:#FFD493\">#42b983</span><span style=\"color:#EEF0F9\">;</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">}</span></span>\n<span class=\"line\"><span style=\"color:#EEF0F9\">&#x3C;/</span><span style=\"color:#54B9FF\">style</span><span style=\"color:#EEF0F9\">></span></span>\n<span class=\"line\"></span></code></pre>\n<p>This format is a developer experience (DX) dream. It's easy to reason about, keeps related code close together, and supports scoped styles out of the box. The Vue DevTools are also a joy to use, providing clear insight into your component hierarchy and state.</p>\n<h2>Summary</h2>\n<p>Vue takes many of the best ideas from React and other frameworks, and packages them in a more approachable, flexible format. Its intuitive template syntax, efficient reactivity system, and excellent developer experience make it a strong contender in the frontend framework arena.</p>\n<p>While React still holds the crown in terms of market share and job opportunities, Vue is like that cool, efficient colleague who gets things done with less fuss. It's particularly shine in scenarios where you need to gradually adopt a framework into an existing project, or when working with designers and developers who appreciate a gentler learning curve.</p>\n<p>In the end, both Vue and React are powerful tools in a UX developer's arsenal. The choice between them often comes down to project requirements, team expertise, and personal preference. But one thing's for sure â€“ if you give Vue a chance, you might just find yourself saying \"Oh la la!\" to this delightful framework.</p>",
    "coverImageUrl": "https://res.cloudinary.com/practicaldev/image/fetch/s--q6AIFazN--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll22z8mea106b4vjdjy7.jpeg",
    "date": "2024-07-16T00:00:00.000Z",
    "author": {
      "name": "Callum Kloos",
      "imageUrl": "/avatar-scaled.jpg"
    },
    "tags": [
      "vue",
      "web"
    ],
    "slug": "experimenting-with-vue"
  },
  {
    "title": "Introducing playQ: A Cutting-Edge Videogame Playlist Manager",
    "description": "playQ is a groundbreaking application designed to revolutionize the way gamers organize and share their video game collections. Leveraging the latest technologies, playQ offers an unparalleled experience for managing and exploring video game playlists.",
    "projectShortName": "playq",
    "content": "<p>At its core, <a href=\"/projects/playq-videogame-playlist-manager\">playQ</a>  is a sophisticated game management platform that empowers users to create, curate, and share personalised playlists of video games. With an intuitive interface and robust feature set, playQ redefines the way gamers interact with their collections, fostering a more immersive and social gaming experience.</p>\n<p>One of playQ's standout features is its comprehensive rating system, enabling users to assign personal ratings to games within their playlists. This powerful functionality not only allows for in-depth comparisons between titles but also facilitates informed decision-making when selecting the next game to play.</p>\n<p>Additionally, playQ seamlessly integrates social networking capabilities, enabling users to share their meticulously crafted playlists with friends or the broader gaming community. This feature promotes game discovery, fosters meaningful discussions, and cultivates a vibrant community of passionate gamers.\nA Cutting-Edge Tech Stack for an Exceptional User Experience</p>\n<p>playQ is more than just a game playlist manager; it is a testament to the power of modern web development technologies. The application's architecture is built upon a robust stack of industry-leading frameworks and libraries, ensuring optimal performance, scalability, and user experience.</p>\n<p>Supabase: At the core of playQ lies Supabase, an open-source Firebase alternative that provides seamless authentication and database management. Supabase replicates many of Firebase's features, such as real-time subscriptions and auto-generated APIs, while offering the versatility and power of PostgreSQL.</p>\n<p>Remix and React: The user interface (UI), routing, and data loading are powered by the dynamic duo of Remix and React. Remix is a cutting-edge web framework for React that priorities user experience, while React facilitates the efficient development of reusable UI components.</p>\n<p>DrizzleORM: playQ's Object-Relational Mapping (ORM) is handled by DrizzleORM, a powerful tool that maps JavaScript objects to database tables, simplifying data operations like inserting, updating, or querying.</p>\n<p>Radix-UI and Shad/cn Inspired Components: To further elevate the user experience, playQ incorporates Radix-UI, a library of low-level, accessible, and unstyled UI components designed for building high-quality web interfaces. The application's UI design is also influenced by the modern and minimalist aesthetic of ShaD/CN styled-components.</p>\n<p>By leveraging this carefully curated tech stack, playQ showcases how sophisticated technologies can be combined to deliver efficient coding practices, superior performance, and an unparalleled user experience.</p>",
    "coverImageUrl": "https://ck-portfolio-images.s3.eu-west-2.amazonaws.com/images/projects/playq/1.png",
    "date": "2024-02-25",
    "author": {
      "name": "Callum Kloos",
      "imageUrl": "/avatar.jpeg"
    },
    "tags": [
      "playQ"
    ],
    "slug": "introducing-playq-a-cuttingedge-videogame-playlist-manager"
  },
  {
    "title": "Using Notion as a Simple Content Management System",
    "description": "This Little Piggy required a simple yet flexible content management solution on a small scale. Notion ticked all the boxes.",
    "projectShortName": "thislittlepiggyrichmond",
    "content": "<p>When designing the new website for <a href=\"/projects/this-little-piggy-richmond\">This Little Piggy Richmond</a> , a non-profit organisation dedicated to rehoming guinea pigs, the top priority was a simple and efficient system for adding content to the website. The organisation needed a solution that allowed them to move quickly without being bogged down by complex processes or systems prone to errors and frustration. The website is a crucial part of their work, and the ability to update it promptly was key.</p>\n<h2>The Challenge: High Turnover and Cute Content</h2>\n<p>This Little Piggy Richmond experiences a high turnover of guinea pigs due to the need for pairing, partnering, new arrivals, and high levels of pregnancy. As a result, they required a website that could showcase the cuteness factor of these animals while ensuring that the content remained as up-to-date as possible.</p>\n<h2>The Solution: Notion as a Backend</h2>\n<p>Initially, we considered creating an admin panel tool alongside the public website, allowing the organisation to update the database directly. However, we decided against this approach for several reasons:</p>\n<ol>\n<li><strong>Increased Workload</strong>: Building an admin panel would have doubled the amount of work required, and the need for a new website was urgent.</li>\n<li><strong>Lack of Flexibility</strong>: An admin panel might have been too inflexible during the early stages, where iterations and changes were likely to occur.</li>\n</ol>\n<p>After exploring various options, we had the idea of using Notion as the backend, with all data presented on the front-end being pulled directly from Notion.</p>\n<h2>Considerations and Challenges</h2>\n<p><strong>Open Schema</strong>: Notion has a very flexible and lax data model, as expected from a product of its kind. To ensure data integrity, we had to implement strict measures to lock down the databases that touched the front-end, preventing schema changes. Additionally, we needed to handle any potential issues gracefully on the front-end to maintain the application's availability.</p>\n<p><strong>Dynamic vs. Static</strong>: As the ability to quickly change content on the front-end was crucial for the client, rendering pages dynamically on each visit was the preferred approach. However, it was essential to consider the issue of 'live' data being pulled from Notion before it was ready for publication.</p>\n<p><strong>Data Ownership</strong>: One potential risk of this solution was the ownership of the data. Since Notion is not designed as a database, there was a possibility that they could revoke API access or change their terms to disallow this use case. To mitigate this risk, we implemented data backups and ensured a clear path for data portability.</p>\n<h2>Implementation Details</h2>\n<p><strong>Graceful Error Handling and Fallback Data</strong>: To handle cases where the client had incomplete data in the Notion database, we implemented a solution where our components could handle missing data gracefully. This approach provided informative feedback to the client, allowing them to identify and rectify missing data issues without crashing the entire site.</p>\n<p><strong>Data Syncing</strong>: To ensure data integrity and mitigate potential risks, we set up a daily backup process that synchronised data from Notion to a SQLite database. This backup would enable us to migrate to a different solution if necessary.</p>\n<p><strong>Mark as Ready</strong>: To prevent accidental publishing of incomplete or unready data, we implemented a tagging system in Notion. Only data marked as \"website-ready\" would be pulled and displayed on the front-end.</p>\n<p>By leveraging Notion as the backend and implementing these measures, we were able to provide <a href=\"/projects/this-little-piggy-richmond\">This Little Piggy Richmond</a> with a simple and efficient content management system that met their needs for promptly updating their website with the latest adorable guinea pig content.</p>",
    "coverImageUrl": "https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2021/02/Notion-logo-1.png",
    "date": "2024-02-14",
    "author": {
      "name": "Callum Kloos",
      "imageUrl": "/avatar.jpeg"
    },
    "tags": [
      "web development",
      "backend"
    ],
    "slug": "using-notion-as-a-simple-content-management-system"
  },
  {
    "title": "An Open Letter to Potential Recruiters",
    "description": "Thank you for stopping by! If you have not read my bespoke cover letter yet, then please enjoy this open letter instead",
    "content": "<p>Dear Potential Employer</p>\n<p>Thank you for showing interest in my application, and welcome to my portfolio. With my multifaceted background in <em>product management</em>, <em>user experience design</em>, mechanical engineering, and <em>web development</em>, complemented by my passion for learning and continuous growth, I am confident in my ability to contribute positively to your team.</p>\n<p>During the last year and a half, I've dedicated my time to learning web development and have developed a proficiency in JavaScript, TypeScript, React, the Remix Framework, Next.js to a lesser extent, and currently experimenting with Hono Framework for lightweight data APIs. The culmination of my effort is evident in two apps I conceptualised and developed. The first app - PlayQ is a full-stack web application for sharing video game playlists with enhanced interactivity, the other being a dynamic content module for a local charity.</p>\n<p>My previous role as a Product Manager and UX Designer has given me invaluable experience working in agile environments, understanding the technical nuances from a development perspective, and leading cross-functional teams to deliver projects efficiently. My innate empathy aids in building productive relationships fostering a cooperative work culture.</p>\n<p>I strongly believe that the skills I garnered from my former roles, augmented by my recent foray into web development, will provide a unique standpoint combining technical, design, and product management perspectives critical for a Web Development role.</p>\n<p>With an unwavering enthusiasm for embracing newer technologies, contributing to open-source documentation, and exposing myself to system-level languages such as Rust and Go on the side, I am certain I will bring a proactive, learning mindset to.. Your Companyâ„¢.</p>\n<p>Given the opportunity, I look forward to leveraging my skills and experiences to support Your Companyâ„¢ in achieving its operational and strategic goals while fostering my professional growth as a web developer.</p>\n<p>Thank you for considering my application. I look forward to the possibility of discussing this exciting opportunity with you.</p>\n<p>Sincerely,</p>\n<p><strong><em>Callum Kloos</em></strong></p>",
    "coverImageUrl": "https://images.unsplash.com/photo-1483389127117-b6a2102724ae?q=80&w=3348&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "date": "2024-03-07",
    "author": {
      "name": "Callum Kloos",
      "imageUrl": "/avatar.jpeg"
    },
    "tags": [
      "web development"
    ],
    "slug": "an-open-letter-to-potential-recruiters"
  }
]